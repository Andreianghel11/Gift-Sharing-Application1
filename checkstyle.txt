Starting audit...
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:18: Line is longer than 100 characters (found 126). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:18:25: Parameter newSantaBudget should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:18:45: Parameter newGifts should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:18:66: Parameter newChildren should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:18:91: Parameter childrenUpdates should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:25:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'getNewSantaBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'getNewSantaBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:29:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'setNewSantaBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'setNewSantaBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:29:35: Parameter newSantaBudget should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:33:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'getNewGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'getNewGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:37:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'setNewGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'setNewGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:37:29: Parameter newGifts should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:41:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'getNewChildren' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'getNewChildren' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:45:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'setNewChildren' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'setNewChildren' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:45:32: Parameter newChildren should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:49:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'getChildrenUpdates' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'getChildrenUpdates' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:53:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'setChildrenUpdates' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'setChildrenUpdates' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:53:36: Parameter childrenUpdates should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:57:5: Class 'AnnualChange' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChange' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:59:32: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:60:52: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:61:42: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:62:48: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\AnnualChange.java:63:56: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:3:8: Unused import - enums.Category. [UnusedImports]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:23:18: Parameter id should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:23:26: Parameter lastName should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:23:43: Parameter firstName should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:23:61: Parameter age should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:23:70: Parameter city should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:24:18: Parameter niceScore should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:24:36: Parameter giftsPreferences should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:34:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:38:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:38:23: Parameter id should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:42:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:46:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:46:29: Parameter lastName should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:50:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:54:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:54:30: Parameter firstName should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:58:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:62:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:62:24: Parameter age should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:66:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:70:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:70:25: Parameter city should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:74:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:78:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:78:30: Parameter niceScore should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:82:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:86:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:86:37: Parameter giftsPreferences should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:90:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:92:25: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:93:28: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:94:50: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:95:52: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:96:32: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:97:42: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:98:44: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Child.java:99:58: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:13:24: Parameter id should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:13:32: Parameter niceScore should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:13:47: Parameter giftsPreferences should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:19:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:23:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'setId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'setId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:23:23: Parameter id should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:27:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:31:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'setNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'setNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:31:30: Parameter niceScore should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:35:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'getGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'getGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:39:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'setGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'setGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:39:37: Parameter giftsPreferences should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:43:5: Class 'ChildUpdate' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdate' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:45:31: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:46:28: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:47:44: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\ChildUpdate.java:48:58: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:10:17: Parameter name should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:10:30: Parameter price should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:10:41: Parameter category should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:16:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'getName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'getName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:20:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'setName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'setName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:20:25: Parameter name should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:24:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'getPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'getPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:28:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'setPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'setPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:28:26: Parameter price should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:32:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'getCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'getCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:36:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'setCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'setCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:36:29: Parameter category should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:40:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:42:24: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:43:40: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:44:36: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\database\Gift.java:45:50: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:1:9: Name 'fileInputOutput' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:20: Line is longer than 100 characters (found 122). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:20:18: Parameter numberOfYears should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:20:37: Parameter santaBudget should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:20:54: Parameter children should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:20:76: Parameter gifts should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:20:94: Parameter changes should be final. [FinalParameters]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:50:25: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:51:50: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:52:48: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:53:42: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:54:36: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Input.java:55:40: '+' should be on a new line. [OperatorWrap]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:1:9: Name 'fileInputOutput' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:25:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:52: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:63:35: 'typecast' is not followed by whitespace. [WhitespaceAfter]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:72: Line is longer than 100 characters (found 141). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:74: Line is longer than 100 characters (found 110). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:80: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:81: Line is longer than 100 characters (found 111). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:82: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:91: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:97: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:98: Line is longer than 100 characters (found 106). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:99: Line is longer than 100 characters (found 107). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:100: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:101: Line is longer than 100 characters (found 101). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:102: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:103: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:113: Line is longer than 100 characters (found 124). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:118: Line is longer than 100 characters (found 102). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:118:29: 'if' is not followed by whitespace. [WhitespaceAround]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:118:31: '(' is followed by whitespace. [ParenPad]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:120: Line is longer than 100 characters (found 112). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:122: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:128: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:129: Line is longer than 100 characters (found 116). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\InputLoader.java:130: Line is longer than 100 characters (found 104). [LineLength]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Utils.java:1:9: Name 'fileInputOutput' must match pattern '^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$'. [PackageName]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Utils.java:8:1: Utility classes should not have a public or default constructor. [HideUtilityClassConstructor]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Utils.java:9:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\fileInputOutput\Utils.java:17:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\main\Main.java:25:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] E:\Facultate\An II\Sem 1\POO\Proiect1\proiect1\.\src\main\Main.java:46:5: Missing a Javadoc comment. [MissingJavadocMethod]
Audit done.
Checkstyle ends with 140 errors.
